pipeline {
    agent any
    environment {
        DOCKER_IMAGE_BACKEND = 'kavishkajaysinghe/mern-backend'
        DOCKER_IMAGE_FRONTEND = 'kavishkajaysinghe/mern-frontend'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        AWS_REGION = 'us-east-1'
        KUBECONFIG = credentials('kubernetes')
        AWS_CREDENTIALS = credentials('AWS-Credentials')
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Backend') {
            steps {
                dir('LotusIslandBackend') {
                    script {
                        sh 'ls -la'
                        sh "docker build --no-cache -t ${DOCKER_IMAGE_BACKEND}:${DOCKER_TAG} ."
                    }
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('LoutesIsland_Admin_FrontEnd') {
                    script {
                        sh 'ls -la'
                        sh "docker build --no-cache -t ${DOCKER_IMAGE_FRONTEND}:${DOCKER_TAG} ."
                    }
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                sh "docker push ${DOCKER_IMAGE_BACKEND}:${DOCKER_TAG}"
                sh "docker push ${DOCKER_IMAGE_FRONTEND}:${DOCKER_TAG}"
                sh "docker tag ${DOCKER_IMAGE_BACKEND}:${DOCKER_TAG} ${DOCKER_IMAGE_BACKEND}:latest"
                sh "docker tag ${DOCKER_IMAGE_FRONTEND}:${DOCKER_TAG} ${DOCKER_IMAGE_FRONTEND}:latest"
                sh "docker push ${DOCKER_IMAGE_BACKEND}:latest"
                sh "docker push ${DOCKER_IMAGE_FRONTEND}:latest"
            }
        }

        stage('Configure AWS') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',
                                  credentialsId: 'AWS-Credentials',
                                  accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                                  secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh "aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}"
                    sh "aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}"
                    sh "aws configure set region ${AWS_REGION}"
                }
            }
        }

        stage('Test Kubernetes Configuration') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                    sh '''
                        kubectl --kubeconfig=$KUBECONFIG get nodes
                        kubectl --kubeconfig=$KUBECONFIG cluster-info
                        kubectl --kubeconfig=$KUBECONFIG get pods --all-namespaces
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                    sh '''
                        sed -i 's|{{DOCKER_IMAGE_BACKEND}}|'"${DOCKER_IMAGE_BACKEND}:${DOCKER_TAG}"'|' kubernetes/backend-deployment.yaml
                        sed -i 's|{{DOCKER_IMAGE_FRONTEND}}|'"${DOCKER_IMAGE_FRONTEND}:${DOCKER_TAG}"'|' kubernetes/frontend-deployment.yaml

                        kubectl --kubeconfig=$KUBECONFIG apply -f kubernetes/namespace.yaml
                        kubectl --kubeconfig=$KUBECONFIG apply -f kubernetes/mongodb-deployment.yaml
                        kubectl --kubeconfig=$KUBECONFIG apply -f kubernetes/backend-deployment.yaml
                        kubectl --kubeconfig=$KUBECONFIG apply -f kubernetes/frontend-deployment.yaml
                        kubectl --kubeconfig=$KUBECONFIG apply -f kubernetes/service.yaml
                    '''
                }
            }
        }
    }

    post {
        always {
            sh 'docker logout'
            cleanWs()
        }
    }
}
