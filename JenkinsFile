pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = "dockerhub-credentials"
        DOCKER_USERNAME = "kavishkajaysinghe"
        DOCKER_IMAGE_BACKEND = "${DOCKER_USERNAME}/lotus-backend"  
        DOCKER_IMAGE_FRONTEND = "${DOCKER_USERNAME}/lotus-frontend" 
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        AWS_REGION = 'us-east-1'
        KUBECONFIG = credentials('kubernetes')
        AWS_CREDENTIALS = credentials('AWS-Credentials')
    }

    stages {

        stage('Debug Environment') {
            steps {
                sh '''
                    echo "===== DEBUG INFO ====="
                    echo "Working directory: $(pwd)"
                    echo "Jenkins workspace: $WORKSPACE"
                    echo "Docker version: $(docker --version)"
                    echo "User running Jenkins: $(whoami)"
                    echo "===== END DEBUG INFO ====="
                '''
            }
        }

        stage('Pull Code from GitHub') {
            steps {
                git branch: 'main', url: 'https://github.com/KavishkaJaysinghe/LoutesPipeLine.git', credentialsId: 'Github-Credentials'
                sh '''
                    echo "===== REPOSITORY CONTENT ====="
                    ls -la
                    echo "===== END REPOSITORY CONTENT ====="
                '''
            }
        }

        // Build Backend Image - Detailed Debug Version
        stage('Build Backend Image') {
            steps {
                script {
                    sh '''
                        echo "===== CHECKING SERVER DIRECTORY ====="
                        if [ ! -d "server" ]; then
                            echo "ERROR: server directory does not exist!"
                            echo "Current directory contents:"
                            ls -la
                            exit 1
                        fi
                        
                        echo "===== SERVER DIRECTORY CONTENTS ====="
                        cd server
                        ls -la
                        
                        echo "===== CHECKING FOR DOCKERFILE ====="
                        if [ ! -f "Dockerfile" ]; then
                            echo "ERROR: Dockerfile not found in server directory!"
                            exit 1
                        fi
                        
                        echo "===== DOCKERFILE CONTENTS ====="
                        cat Dockerfile
                        
                        echo "===== DOCKER BUILD COMMAND ====="
                        echo "Running: docker build -t ${DOCKER_IMAGE_BACKEND}:${DOCKER_TAG} ."
                        
                        echo "===== STARTING DOCKER BUILD ====="
                        # Try with sudo if permissions might be an issue
                        docker build -t ${DOCKER_IMAGE_BACKEND}:${DOCKER_TAG} . || {
                            echo "===== DOCKER BUILD FAILED ====="
                            echo "Trying with sudo..."
                            sudo docker build -t ${DOCKER_IMAGE_BACKEND}:${DOCKER_TAG} .
                        }
                        
                        echo "===== CHECKING DOCKER IMAGES ====="
                        docker images | grep lotus-backend
                    '''
                }
            }
        }



        // Build Frontend Image
        stage('Build Frontend Image') {
            steps {
                dir('client') {
                    script {
                        sh '''
                            # Print directory contents for debugging
                            ls -la
                            
                            # Check if Dockerfile exists
                            if [ ! -f Dockerfile ]; then
                                echo "Dockerfile not found in client directory!"
                                exit 1
                            fi
                            
                            # Build with verbose output
                            docker build -t ${DOCKER_IMAGE_FRONTEND}:${DOCKER_TAG} . --no-cache
                        '''
                    }
                }
            }
        }

        // Login to Docker Hub
        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin'
                }
            }
        }

        // Push Docker Images to Docker Hub
        stage('Push Docker Images') {
            steps {
                script {
                    // Push Backend Image
                    sh 'docker push ${DOCKER_IMAGE_BACKEND}:${DOCKER_TAG}'
                    sh 'docker tag ${DOCKER_IMAGE_BACKEND}:${DOCKER_TAG} ${DOCKER_IMAGE_BACKEND}:latest'
                    sh 'docker push ${DOCKER_IMAGE_BACKEND}:latest'

                    // Push Frontend Image
                    sh 'docker push ${DOCKER_IMAGE_FRONTEND}:${DOCKER_TAG}'
                    sh 'docker tag ${DOCKER_IMAGE_FRONTEND}:${DOCKER_TAG} ${DOCKER_IMAGE_FRONTEND}:latest'
                    sh 'docker push ${DOCKER_IMAGE_FRONTEND}:latest'
                }
            }
        }

        // Configure AWS
        stage('Configure AWS') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', 
                                  credentialsId: AWS_CREDENTIALS, 
                                  accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
                                  secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh 'aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID'
                    sh 'aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY'
                    sh "aws configure set region ${AWS_REGION}"
                }
            }
        }

        // Test Kubernetes Configuration
        stage('Test Kubernetes Configuration') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                    sh '''
                        kubectl --kubeconfig=$KUBECONFIG get nodes
                        kubectl --kubeconfig=$KUBECONFIG cluster-info
                        kubectl --kubeconfig=$KUBECONFIG get pods --all-namespaces
                    '''
                }
            }
        }

        // Deploy to Kubernetes
        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                    script {
                        sh '''
                            # Update Docker image tags in Kubernetes deployment files
                            sed -i "s|{{DOCKER_IMAGE_BACKEND}}|${DOCKER_IMAGE_BACKEND}:${DOCKER_TAG}|g" kubernetes/backend-deployment.yaml
                            sed -i "s|{{DOCKER_IMAGE_FRONTEND}}|${DOCKER_IMAGE_FRONTEND}:${DOCKER_TAG}|g" kubernetes/frontend-deployment.yaml

                            # Apply Kubernetes configurations
                            kubectl --kubeconfig=$KUBECONFIG apply -f kubernetes/namespace.yaml
                            kubectl --kubeconfig=$KUBECONFIG apply -f kubernetes/mongodb-deployment.yaml
                            kubectl --kubeconfig=$KUBECONFIG apply -f kubernetes/backend-deployment.yaml
                            kubectl --kubeconfig=$KUBECONFIG apply -f kubernetes/frontend-deployment.yaml
                            kubectl --kubeconfig=$KUBECONFIG apply -f kubernetes/service.yaml
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            sh 'docker logout'
            cleanWs()
        }

        success {
            echo 'Pipeline executed successfully!'
        }

        failure {
            echo 'Pipeline execution failed!'
        }
    }

        

    post {
        failure {
            echo '''
                =================================================
                ================ BUILD FAILED ===================
                =================================================
                Check the logs above for detailed error messages.
                Common issues:
                1. Missing Dockerfile
                2. Docker permission issues
                3. Syntax errors in Dockerfile
                4. Network connectivity issues
                5. Docker daemon not running
                =================================================
            '''
        }
    }
    
}